source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
git status
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
rows <- list(
data.frame(component=comp$name, param="intercept", value=unname(ini$intercept)),
if (length(ini$betas)) data.frame(
component=comp$name,
param=paste0("beta[", names(ini$betas), "]"),
value=unname(ini$betas)
),
data.frame(component=comp$name, param="loading[f1]", value=unname(ini$loading))
)
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/R/define_factor_model.R")
source("~/factorana/factorana_R_interface/R/define_model_component.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/R/define_model_component.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/R/define_estimation_control.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
git status
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/R/estimate_model.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/R/estimate_model.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
git status
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/R/estimate_model.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/R/estimate_model.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/roy_onefactor_print_test.R")
source("~/factorana/factorana_R_interface/R/define_model_component.R")
source("~/factorana/factorana_R_interface/R/estimate_model.R")
cd
ls
install.packages(c("usethis","testthat","withr"))  # once
usethis::use_testthat(edition = 3)
usethis::use_test("components")
usethis::use_test("helper")
usethis::use_test("test-01-validation")
usethis::use_test("test-02-conditioning")
usethis::use_test("test-03-modeltypes")
usethis::use_test("test-04-initialize.R")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
git status
# Build the numeric parameter file (index value se)
packed <- pack_values_with_ses(ms, inits, factor_var_first = 1.0)
# Combine into a data.frame for export
param_df <- data.frame(
index = seq_along(packed$values),
value = packed$values,
se    = packed$ses
)
# Write CSV instead of text
csv_path <- file.path("results", "meas_par.csv")
write.csv(param_df, csv_path, row.names = FALSE)
# Replace NA standard error with 1
param_df$se[is.na(param_df$se)] <- 1
# Write CSV instead of text
csv_path <- file.path("results", "meas_par.csv")
write.csv(param_df, csv_path, row.names = FALSE)
# ---- Save simulated dataset ----
sim_path <- file.path("results", "simulated_data.csv")
write.csv(dat, sim_path, row.names = FALSE)
cat("Wrote", sim_path, "\n")
git add -u
mc <- define_model_component("Ytest", dat, "Y", f1,
evaluation_indicator = "eval",
covariates = c("X1"),
model_type = "linear")
dat <- data.frame(
Y = c(1, 2, 3, 4),
X1 = c(5, 6, 7, 8),
eval = c(1, 0, 1, 0)  # evaluation indicator
)
mc <- define_model_component("Ytest", dat, "Y", f1,
evaluation_indicator = "eval",
covariates = c("X1"),
model_type = "linear")
f1 <- define_factor_model(1, 1, 8)
mc <- define_model_component("Ytest", dat, "Y", f1,
evaluation_indicator = "eval",
covariates = c("X1"),
model_type = "linear")
head(mc$data)
fit <- MASS::polr(y ~ ., data = df, method = "probit", Hess = TRUE) #runs ordered probit
source("~/factorana/factorana_R_interface/R/estimate_model.R")
